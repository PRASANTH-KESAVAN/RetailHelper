version: '3.8'

services:
  # Main Streamlit Application
  retail-analytics:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: retail-analytics-app
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./reports:/app/reports
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=sqlite:///data/database/retail_analytics.db
      - LOG_LEVEL=INFO
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    depends_on:
      - redis-cache
      - postgres-db
    networks:
      - retail-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (optional - can use SQLite instead)
  postgres-db:
    image: postgres:15-alpine
    container_name: retail-postgres-db
    environment:
      - POSTGRES_DB=retail_analytics
      - POSTGRES_USER=retail_user
      - POSTGRES_PASSWORD=retail_password123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - retail-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U retail_user -d retail_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching (optional)
  redis-cache:
    image: redis:7-alpine
    container_name: retail-redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass retail_redis_password
    networks:
      - retail-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Jupyter Notebook for Development (optional)
  jupyter-notebook:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: retail-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./src:/app/src
      - ./config:/app/config
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - PYTHONPATH=/app
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=''", "--NotebookApp.password=''"]
    networks:
      - retail-network
    restart: unless-stopped
    profiles:
      - development

  # MLflow Tracking Server (optional - for model versioning)
  mlflow-server:
    image: python:3.11-slim
    container_name: retail-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlflow:/app/mlflow
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///app/mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/app/mlflow/artifacts
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server 
        --backend-store-uri sqlite:///app/mlflow/mlflow.db 
        --default-artifact-root /app/mlflow/artifacts 
        --host 0.0.0.0 
        --port 5000
      "
    networks:
      - retail-network
    restart: unless-stopped
    profiles:
      - mlflow

  # Nginx Reverse Proxy (optional - for production)
  nginx-proxy:
    image: nginx:alpine
    container_name: retail-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - retail-analytics
    networks:
      - retail-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: retail-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - retail-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: retail-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    networks:
      - retail-network
    restart: unless-stopped
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network for service communication
networks:
  retail-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16